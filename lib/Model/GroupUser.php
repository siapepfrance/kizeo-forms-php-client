<?php
/**
 * GroupUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  SiapepFrance\KizeoForms
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kizeo REST
 *
 * This is a Swagger generated doc for Kizeo REST API 3. You can find additionnal documentation here : [Online documentation](/doc).
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@kizeo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SiapepFrance\KizeoForms\Model;

use \ArrayAccess;
use \SiapepFrance\KizeoForms\ObjectSerializer;

/**
 * GroupUser Class Doc Comment
 *
 * @category Class
 * @package  SiapepFrance\KizeoForms
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupUser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GroupUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'login' => 'string',
'password' => 'string',
'firstName' => 'string',
'lastName' => 'string',
'phone' => 'string',
'email' => 'string',
'admin' => 'bool',
'formUser' => 'bool',
'allowFormMenu' => 'bool',
'allowExternallistMenu' => 'bool',
'allowUserMenu' => 'bool',
'allowApplicationMenu' => 'bool',
'allowExportMenu' => 'bool',
'allowDataMenu' => 'bool',
'allowAccountMenu' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'login' => null,
'password' => null,
'firstName' => null,
'lastName' => null,
'phone' => null,
'email' => null,
'admin' => null,
'formUser' => null,
'allowFormMenu' => null,
'allowExternallistMenu' => null,
'allowUserMenu' => null,
'allowApplicationMenu' => null,
'allowExportMenu' => null,
'allowDataMenu' => null,
'allowAccountMenu' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'login' => 'login',
'password' => 'password',
'firstName' => 'first_name',
'lastName' => 'last_name',
'phone' => 'phone',
'email' => 'email',
'admin' => 'admin',
'formUser' => 'form_user',
'allowFormMenu' => 'allow_form_menu',
'allowExternallistMenu' => 'allow_externallist_menu',
'allowUserMenu' => 'allow_user_menu',
'allowApplicationMenu' => 'allow_application_menu',
'allowExportMenu' => 'allow_export_menu',
'allowDataMenu' => 'allow_data_menu',
'allowAccountMenu' => 'allow_account_menu'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'login' => 'setLogin',
'password' => 'setPassword',
'firstName' => 'setFirstName',
'lastName' => 'setLastName',
'phone' => 'setPhone',
'email' => 'setEmail',
'admin' => 'setAdmin',
'formUser' => 'setFormUser',
'allowFormMenu' => 'setAllowFormMenu',
'allowExternallistMenu' => 'setAllowExternallistMenu',
'allowUserMenu' => 'setAllowUserMenu',
'allowApplicationMenu' => 'setAllowApplicationMenu',
'allowExportMenu' => 'setAllowExportMenu',
'allowDataMenu' => 'setAllowDataMenu',
'allowAccountMenu' => 'setAllowAccountMenu'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'login' => 'getLogin',
'password' => 'getPassword',
'firstName' => 'getFirstName',
'lastName' => 'getLastName',
'phone' => 'getPhone',
'email' => 'getEmail',
'admin' => 'getAdmin',
'formUser' => 'getFormUser',
'allowFormMenu' => 'getAllowFormMenu',
'allowExternallistMenu' => 'getAllowExternallistMenu',
'allowUserMenu' => 'getAllowUserMenu',
'allowApplicationMenu' => 'getAllowApplicationMenu',
'allowExportMenu' => 'getAllowExportMenu',
'allowDataMenu' => 'getAllowDataMenu',
'allowAccountMenu' => 'getAllowAccountMenu'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['admin'] = isset($data['admin']) ? $data['admin'] : null;
        $this->container['formUser'] = isset($data['formUser']) ? $data['formUser'] : null;
        $this->container['allowFormMenu'] = isset($data['allowFormMenu']) ? $data['allowFormMenu'] : null;
        $this->container['allowExternallistMenu'] = isset($data['allowExternallistMenu']) ? $data['allowExternallistMenu'] : null;
        $this->container['allowUserMenu'] = isset($data['allowUserMenu']) ? $data['allowUserMenu'] : null;
        $this->container['allowApplicationMenu'] = isset($data['allowApplicationMenu']) ? $data['allowApplicationMenu'] : null;
        $this->container['allowExportMenu'] = isset($data['allowExportMenu']) ? $data['allowExportMenu'] : null;
        $this->container['allowDataMenu'] = isset($data['allowDataMenu']) ? $data['allowDataMenu'] : null;
        $this->container['allowAccountMenu'] = isset($data['allowAccountMenu']) ? $data['allowAccountMenu'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string $login login
     *
     * @return $this
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName firstName
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName lastName
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return bool
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param bool $admin is admin ?
     *
     * @return $this
     */
    public function setAdmin($admin)
    {
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets formUser
     *
     * @return bool
     */
    public function getFormUser()
    {
        return $this->container['formUser'];
    }

    /**
     * Sets formUser
     *
     * @param bool $formUser is user ?
     *
     * @return $this
     */
    public function setFormUser($formUser)
    {
        $this->container['formUser'] = $formUser;

        return $this;
    }

    /**
     * Gets allowFormMenu
     *
     * @return bool
     */
    public function getAllowFormMenu()
    {
        return $this->container['allowFormMenu'];
    }

    /**
     * Sets allowFormMenu
     *
     * @param bool $allowFormMenu Allow user to access Form Designer Menu
     *
     * @return $this
     */
    public function setAllowFormMenu($allowFormMenu)
    {
        $this->container['allowFormMenu'] = $allowFormMenu;

        return $this;
    }

    /**
     * Gets allowExternallistMenu
     *
     * @return bool
     */
    public function getAllowExternallistMenu()
    {
        return $this->container['allowExternallistMenu'];
    }

    /**
     * Sets allowExternallistMenu
     *
     * @param bool $allowExternallistMenu Allow user to access External List Menu
     *
     * @return $this
     */
    public function setAllowExternallistMenu($allowExternallistMenu)
    {
        $this->container['allowExternallistMenu'] = $allowExternallistMenu;

        return $this;
    }

    /**
     * Gets allowUserMenu
     *
     * @return bool
     */
    public function getAllowUserMenu()
    {
        return $this->container['allowUserMenu'];
    }

    /**
     * Sets allowUserMenu
     *
     * @param bool $allowUserMenu Allow user to access User Menu
     *
     * @return $this
     */
    public function setAllowUserMenu($allowUserMenu)
    {
        $this->container['allowUserMenu'] = $allowUserMenu;

        return $this;
    }

    /**
     * Gets allowApplicationMenu
     *
     * @return bool
     */
    public function getAllowApplicationMenu()
    {
        return $this->container['allowApplicationMenu'];
    }

    /**
     * Sets allowApplicationMenu
     *
     * @param bool $allowApplicationMenu Allow user to access Application Menu
     *
     * @return $this
     */
    public function setAllowApplicationMenu($allowApplicationMenu)
    {
        $this->container['allowApplicationMenu'] = $allowApplicationMenu;

        return $this;
    }

    /**
     * Gets allowExportMenu
     *
     * @return bool
     */
    public function getAllowExportMenu()
    {
        return $this->container['allowExportMenu'];
    }

    /**
     * Sets allowExportMenu
     *
     * @param bool $allowExportMenu Allow user to access Export Menu
     *
     * @return $this
     */
    public function setAllowExportMenu($allowExportMenu)
    {
        $this->container['allowExportMenu'] = $allowExportMenu;

        return $this;
    }

    /**
     * Gets allowDataMenu
     *
     * @return bool
     */
    public function getAllowDataMenu()
    {
        return $this->container['allowDataMenu'];
    }

    /**
     * Sets allowDataMenu
     *
     * @param bool $allowDataMenu Allow user to access Data Menu
     *
     * @return $this
     */
    public function setAllowDataMenu($allowDataMenu)
    {
        $this->container['allowDataMenu'] = $allowDataMenu;

        return $this;
    }

    /**
     * Gets allowAccountMenu
     *
     * @return bool
     */
    public function getAllowAccountMenu()
    {
        return $this->container['allowAccountMenu'];
    }

    /**
     * Sets allowAccountMenu
     *
     * @param bool $allowAccountMenu Allow user to access Account Menu
     *
     * @return $this
     */
    public function setAllowAccountMenu($allowAccountMenu)
    {
        $this->container['allowAccountMenu'] = $allowAccountMenu;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
