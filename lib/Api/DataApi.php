<?php
/**
 * DataApi
 * PHP version 5
 *
 * @category Class
 * @package  SiapepFrance\KizeoForms
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kizeo REST
 *
 * This is a Swagger generated doc for Kizeo REST API 3. You can find additionnal documentation here : [Online documentation](/doc).
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@kizeo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SiapepFrance\KizeoForms\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SiapepFrance\KizeoForms\ApiException;
use SiapepFrance\KizeoForms\Configuration;
use SiapepFrance\KizeoForms\HeaderSelector;
use SiapepFrance\KizeoForms\ObjectSerializer;

/**
 * DataApi Class Doc Comment
 *
 * @category Class
 * @package  SiapepFrance\KizeoForms
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation formsFormIdDataAdvancedPost
     *
     * Get List of filtered data of a form (with advanced filtering options)
     *
     * @param  \SiapepFrance\KizeoForms\Model\AdvancedFilter $body Data params (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function formsFormIdDataAdvancedPost($body, $formId)
    {
        list($response) = $this->formsFormIdDataAdvancedPostWithHttpInfo($body, $formId);
        return $response;
    }

    /**
     * Operation formsFormIdDataAdvancedPostWithHttpInfo
     *
     * Get List of filtered data of a form (with advanced filtering options)
     *
     * @param  \SiapepFrance\KizeoForms\Model\AdvancedFilter $body Data params (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataAdvancedPostWithHttpInfo($body, $formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdDataAdvancedPostRequest($body, $formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataAdvancedPostAsync
     *
     * Get List of filtered data of a form (with advanced filtering options)
     *
     * @param  \SiapepFrance\KizeoForms\Model\AdvancedFilter $body Data params (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataAdvancedPostAsync($body, $formId)
    {
        return $this->formsFormIdDataAdvancedPostAsyncWithHttpInfo($body, $formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataAdvancedPostAsyncWithHttpInfo
     *
     * Get List of filtered data of a form (with advanced filtering options)
     *
     * @param  \SiapepFrance\KizeoForms\Model\AdvancedFilter $body Data params (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataAdvancedPostAsyncWithHttpInfo($body, $formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdDataAdvancedPostRequest($body, $formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataAdvancedPost'
     *
     * @param  \SiapepFrance\KizeoForms\Model\AdvancedFilter $body Data params (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdDataAdvancedPostRequest($body, $formId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdDataAdvancedPost'
            );
        }
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdDataAdvancedPost'
            );
        }

        $resourcePath = '/forms/{formId}/data/advanced';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['*/*']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataAllGet
     *
     * Get the list of all data of a form
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function formsFormIdDataAllGet($formId)
    {
        list($response) = $this->formsFormIdDataAllGetWithHttpInfo($formId);
        return $response;
    }

    /**
     * Operation formsFormIdDataAllGetWithHttpInfo
     *
     * Get the list of all data of a form
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataAllGetWithHttpInfo($formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdDataAllGetRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataAllGetAsync
     *
     * Get the list of all data of a form
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataAllGetAsync($formId)
    {
        return $this->formsFormIdDataAllGetAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataAllGetAsyncWithHttpInfo
     *
     * Get the list of all data of a form
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataAllGetAsyncWithHttpInfo($formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdDataAllGetRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataAllGet'
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdDataAllGetRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdDataAllGet'
            );
        }

        $resourcePath = '/forms/{formId}/data/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataDataIdDeleteDelete
     *
     * Delete a data
     *
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function formsFormIdDataDataIdDeleteDelete($formId, $dataId)
    {
        $this->formsFormIdDataDataIdDeleteDeleteWithHttpInfo($formId, $dataId);
    }

    /**
     * Operation formsFormIdDataDataIdDeleteDeleteWithHttpInfo
     *
     * Delete a data
     *
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataDataIdDeleteDeleteWithHttpInfo($formId, $dataId)
    {
        $returnType = '';
        $request = $this->formsFormIdDataDataIdDeleteDeleteRequest($formId, $dataId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataDataIdDeleteDeleteAsync
     *
     * Delete a data
     *
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdDeleteDeleteAsync($formId, $dataId)
    {
        return $this->formsFormIdDataDataIdDeleteDeleteAsyncWithHttpInfo($formId, $dataId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataDataIdDeleteDeleteAsyncWithHttpInfo
     *
     * Delete a data
     *
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdDeleteDeleteAsyncWithHttpInfo($formId, $dataId)
    {
        $returnType = '';
        $request = $this->formsFormIdDataDataIdDeleteDeleteRequest($formId, $dataId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataDataIdDeleteDelete'
     *
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdDataDataIdDeleteDeleteRequest($formId, $dataId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdDataDataIdDeleteDelete'
            );
        }
        // verify the required parameter 'dataId' is set
        if ($dataId === null || (is_array($dataId) && count($dataId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dataId when calling formsFormIdDataDataIdDeleteDelete'
            );
        }

        $resourcePath = '/forms/{formId}/data/{dataId}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }
        // path params
        if ($dataId !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($dataId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataDataIdGet
     *
     * Get data of a form
     *
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SiapepFrance\KizeoForms\Model\Data
     */
    public function formsFormIdDataDataIdGet($formId, $dataId)
    {
        list($response) = $this->formsFormIdDataDataIdGetWithHttpInfo($formId, $dataId);
        return $response;
    }

    /**
     * Operation formsFormIdDataDataIdGetWithHttpInfo
     *
     * Get data of a form
     *
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SiapepFrance\KizeoForms\Model\Data, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataDataIdGetWithHttpInfo($formId, $dataId)
    {
        $returnType = '\SiapepFrance\KizeoForms\Model\Data';
        $request = $this->formsFormIdDataDataIdGetRequest($formId, $dataId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SiapepFrance\KizeoForms\Model\Data',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataDataIdGetAsync
     *
     * Get data of a form
     *
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdGetAsync($formId, $dataId)
    {
        return $this->formsFormIdDataDataIdGetAsyncWithHttpInfo($formId, $dataId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataDataIdGetAsyncWithHttpInfo
     *
     * Get data of a form
     *
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataDataIdGetAsyncWithHttpInfo($formId, $dataId)
    {
        $returnType = '\SiapepFrance\KizeoForms\Model\Data';
        $request = $this->formsFormIdDataDataIdGetRequest($formId, $dataId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataDataIdGet'
     *
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdDataDataIdGetRequest($formId, $dataId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdDataDataIdGet'
            );
        }
        // verify the required parameter 'dataId' is set
        if ($dataId === null || (is_array($dataId) && count($dataId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dataId when calling formsFormIdDataDataIdGet'
            );
        }

        $resourcePath = '/forms/{formId}/data/{dataId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }
        // path params
        if ($dataId !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($dataId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataGet
     *
     * Get the list of all data of a form (not read)
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function formsFormIdDataGet($formId)
    {
        list($response) = $this->formsFormIdDataGetWithHttpInfo($formId);
        return $response;
    }

    /**
     * Operation formsFormIdDataGetWithHttpInfo
     *
     * Get the list of all data of a form (not read)
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataGetWithHttpInfo($formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdDataGetRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataGetAsync
     *
     * Get the list of all data of a form (not read)
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataGetAsync($formId)
    {
        return $this->formsFormIdDataGetAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataGetAsyncWithHttpInfo
     *
     * Get the list of all data of a form (not read)
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataGetAsyncWithHttpInfo($formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdDataGetRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataGet'
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdDataGetRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdDataGet'
            );
        }

        $resourcePath = '/forms/{formId}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataReadnewGet
     *
     * Get content of unread data
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function formsFormIdDataReadnewGet($formId)
    {
        list($response) = $this->formsFormIdDataReadnewGetWithHttpInfo($formId);
        return $response;
    }

    /**
     * Operation formsFormIdDataReadnewGetWithHttpInfo
     *
     * Get content of unread data
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataReadnewGetWithHttpInfo($formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdDataReadnewGetRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataReadnewGetAsync
     *
     * Get content of unread data
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataReadnewGetAsync($formId)
    {
        return $this->formsFormIdDataReadnewGetAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataReadnewGetAsyncWithHttpInfo
     *
     * Get content of unread data
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataReadnewGetAsyncWithHttpInfo($formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdDataReadnewGetRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataReadnewGet'
     *
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdDataReadnewGetRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdDataReadnewGet'
            );
        }

        $resourcePath = '/forms/{formId}/data/readnew';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdDataSearchPost
     *
     * Get List of filtered data of a form
     *
     * @param  \SiapepFrance\KizeoForms\Model\SearchFilter $body Data params (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function formsFormIdDataSearchPost($body, $formId)
    {
        list($response) = $this->formsFormIdDataSearchPostWithHttpInfo($body, $formId);
        return $response;
    }

    /**
     * Operation formsFormIdDataSearchPostWithHttpInfo
     *
     * Get List of filtered data of a form
     *
     * @param  \SiapepFrance\KizeoForms\Model\SearchFilter $body Data params (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdDataSearchPostWithHttpInfo($body, $formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdDataSearchPostRequest($body, $formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdDataSearchPostAsync
     *
     * Get List of filtered data of a form
     *
     * @param  \SiapepFrance\KizeoForms\Model\SearchFilter $body Data params (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataSearchPostAsync($body, $formId)
    {
        return $this->formsFormIdDataSearchPostAsyncWithHttpInfo($body, $formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdDataSearchPostAsyncWithHttpInfo
     *
     * Get List of filtered data of a form
     *
     * @param  \SiapepFrance\KizeoForms\Model\SearchFilter $body Data params (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdDataSearchPostAsyncWithHttpInfo($body, $formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdDataSearchPostRequest($body, $formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdDataSearchPost'
     *
     * @param  \SiapepFrance\KizeoForms\Model\SearchFilter $body Data params (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdDataSearchPostRequest($body, $formId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdDataSearchPost'
            );
        }
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdDataSearchPost'
            );
        }

        $resourcePath = '/forms/{formId}/data/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['*/*']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdMarkasreadPost
     *
     * Set list of data of a form to read
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataIds $body Data ids parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function formsFormIdMarkasreadPost($body, $formId)
    {
        list($response) = $this->formsFormIdMarkasreadPostWithHttpInfo($body, $formId);
        return $response;
    }

    /**
     * Operation formsFormIdMarkasreadPostWithHttpInfo
     *
     * Set list of data of a form to read
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataIds $body Data ids parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdMarkasreadPostWithHttpInfo($body, $formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdMarkasreadPostRequest($body, $formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdMarkasreadPostAsync
     *
     * Set list of data of a form to read
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataIds $body Data ids parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdMarkasreadPostAsync($body, $formId)
    {
        return $this->formsFormIdMarkasreadPostAsyncWithHttpInfo($body, $formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdMarkasreadPostAsyncWithHttpInfo
     *
     * Set list of data of a form to read
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataIds $body Data ids parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdMarkasreadPostAsyncWithHttpInfo($body, $formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdMarkasreadPostRequest($body, $formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdMarkasreadPost'
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataIds $body Data ids parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdMarkasreadPostRequest($body, $formId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdMarkasreadPost'
            );
        }
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdMarkasreadPost'
            );
        }

        $resourcePath = '/forms/{formId}/markasread';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['*/*']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdMarkasunreadPost
     *
     * Set list of data of form to unread
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataIds $body Data ids parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function formsFormIdMarkasunreadPost($body, $formId)
    {
        list($response) = $this->formsFormIdMarkasunreadPostWithHttpInfo($body, $formId);
        return $response;
    }

    /**
     * Operation formsFormIdMarkasunreadPostWithHttpInfo
     *
     * Set list of data of form to unread
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataIds $body Data ids parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdMarkasunreadPostWithHttpInfo($body, $formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdMarkasunreadPostRequest($body, $formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdMarkasunreadPostAsync
     *
     * Set list of data of form to unread
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataIds $body Data ids parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdMarkasunreadPostAsync($body, $formId)
    {
        return $this->formsFormIdMarkasunreadPostAsyncWithHttpInfo($body, $formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdMarkasunreadPostAsyncWithHttpInfo
     *
     * Set list of data of form to unread
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataIds $body Data ids parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdMarkasunreadPostAsyncWithHttpInfo($body, $formId)
    {
        $returnType = 'object';
        $request = $this->formsFormIdMarkasunreadPostRequest($body, $formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdMarkasunreadPost'
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataIds $body Data ids parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdMarkasunreadPostRequest($body, $formId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdMarkasunreadPost'
            );
        }
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdMarkasunreadPost'
            );
        }

        $resourcePath = '/forms/{formId}/markasunread';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['*/*']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdPushDataIdPost
     *
     * Send push with data
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataPush $body Data parameters (required)
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data to edit (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SiapepFrance\KizeoForms\Model\DataMin
     */
    public function formsFormIdPushDataIdPost($body, $formId, $dataId)
    {
        list($response) = $this->formsFormIdPushDataIdPostWithHttpInfo($body, $formId, $dataId);
        return $response;
    }

    /**
     * Operation formsFormIdPushDataIdPostWithHttpInfo
     *
     * Send push with data
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataPush $body Data parameters (required)
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data to edit (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SiapepFrance\KizeoForms\Model\DataMin, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdPushDataIdPostWithHttpInfo($body, $formId, $dataId)
    {
        $returnType = '\SiapepFrance\KizeoForms\Model\DataMin';
        $request = $this->formsFormIdPushDataIdPostRequest($body, $formId, $dataId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SiapepFrance\KizeoForms\Model\DataMin',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdPushDataIdPostAsync
     *
     * Send push with data
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataPush $body Data parameters (required)
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data to edit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdPushDataIdPostAsync($body, $formId, $dataId)
    {
        return $this->formsFormIdPushDataIdPostAsyncWithHttpInfo($body, $formId, $dataId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdPushDataIdPostAsyncWithHttpInfo
     *
     * Send push with data
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataPush $body Data parameters (required)
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data to edit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdPushDataIdPostAsyncWithHttpInfo($body, $formId, $dataId)
    {
        $returnType = '\SiapepFrance\KizeoForms\Model\DataMin';
        $request = $this->formsFormIdPushDataIdPostRequest($body, $formId, $dataId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdPushDataIdPost'
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataPush $body Data parameters (required)
     * @param  int $formId ID of the form (required)
     * @param  int $dataId ID of the data to edit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdPushDataIdPostRequest($body, $formId, $dataId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdPushDataIdPost'
            );
        }
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdPushDataIdPost'
            );
        }
        // verify the required parameter 'dataId' is set
        if ($dataId === null || (is_array($dataId) && count($dataId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dataId when calling formsFormIdPushDataIdPost'
            );
        }

        $resourcePath = '/forms/{formId}/push/{dataId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }
        // path params
        if ($dataId !== null) {
            $resourcePath = str_replace(
                '{' . 'dataId' . '}',
                ObjectSerializer::toPathValue($dataId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['*/*']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsFormIdPushPost
     *
     * Send push with data
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataPush $body Data parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SiapepFrance\KizeoForms\Model\DataMin
     */
    public function formsFormIdPushPost($body, $formId)
    {
        list($response) = $this->formsFormIdPushPostWithHttpInfo($body, $formId);
        return $response;
    }

    /**
     * Operation formsFormIdPushPostWithHttpInfo
     *
     * Send push with data
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataPush $body Data parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SiapepFrance\KizeoForms\Model\DataMin, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsFormIdPushPostWithHttpInfo($body, $formId)
    {
        $returnType = '\SiapepFrance\KizeoForms\Model\DataMin';
        $request = $this->formsFormIdPushPostRequest($body, $formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SiapepFrance\KizeoForms\Model\DataMin',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsFormIdPushPostAsync
     *
     * Send push with data
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataPush $body Data parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdPushPostAsync($body, $formId)
    {
        return $this->formsFormIdPushPostAsyncWithHttpInfo($body, $formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsFormIdPushPostAsyncWithHttpInfo
     *
     * Send push with data
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataPush $body Data parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsFormIdPushPostAsyncWithHttpInfo($body, $formId)
    {
        $returnType = '\SiapepFrance\KizeoForms\Model\DataMin';
        $request = $this->formsFormIdPushPostRequest($body, $formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsFormIdPushPost'
     *
     * @param  \SiapepFrance\KizeoForms\Model\DataPush $body Data parameters (required)
     * @param  int $formId ID of the form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsFormIdPushPostRequest($body, $formId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling formsFormIdPushPost'
            );
        }
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling formsFormIdPushPost'
            );
        }

        $resourcePath = '/forms/{formId}/push';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['*/*']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formsPushInboxGet
     *
     * Receive new pushed data
     *
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SiapepFrance\KizeoForms\Model\FormMin
     */
    public function formsPushInboxGet()
    {
        list($response) = $this->formsPushInboxGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation formsPushInboxGetWithHttpInfo
     *
     * Receive new pushed data
     *
     *
     * @throws \SiapepFrance\KizeoForms\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SiapepFrance\KizeoForms\Model\FormMin, HTTP status code, HTTP response headers (array of strings)
     */
    public function formsPushInboxGetWithHttpInfo()
    {
        $returnType = '\SiapepFrance\KizeoForms\Model\FormMin';
        $request = $this->formsPushInboxGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SiapepFrance\KizeoForms\Model\FormMin',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formsPushInboxGetAsync
     *
     * Receive new pushed data
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsPushInboxGetAsync()
    {
        return $this->formsPushInboxGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation formsPushInboxGetAsyncWithHttpInfo
     *
     * Receive new pushed data
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formsPushInboxGetAsyncWithHttpInfo()
    {
        $returnType = '\SiapepFrance\KizeoForms\Model\FormMin';
        $request = $this->formsPushInboxGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'formsPushInboxGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formsPushInboxGetRequest()
    {

        $resourcePath = '/forms/push/inbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
